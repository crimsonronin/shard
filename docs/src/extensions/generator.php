<section id="generator" title="Generator">
  <div class="page-header">
    <h1>Generator</h1>
  </div>

    <p class="lead">Dynamically generate new resources based on document classes</p>

    <p>The generator extension can be used to dynamically generate resources such as help files, javascript, and api documentation, from your document classes.</p>

    <h2>Configuration</h2>

    <p>Configuration is very important for the Generator extension. A <code>resource_map</code> must be defined. A <code>resource_map</code> is an array of resources that can be generated by the generator extension. The array keys are the resource names.</p>

<pre class="prettyprint linenums">
$manifest = new Zoop\Shard\Manifest([
    ...
    'extension_configs' => [
        'extension.generator' => [
            'my resource name' => [
                /* resource generator config goes here */
            ]
        ]
    ],
    ...
]);
</pre>

    <p>The configuration array for a resource may have three keys:</p>

<table class="table table-bordered table-striped">
  <thead>
   <tr>
     <th style="width: 100px;">Name</th>
     <th style="width: 50px;">type</th>
     <th style="width: 50px;">required</th>
     <th>description</th>
   </tr>
  </thead>
  <tbody>
<tr>
    <td>generator</td>
    <td>string</td>
    <td>true</td>
    <td>The service name which will return an instance of <code>Zoop\Shard\Generator\GeneratorInterface</code></td>
</tr>
<tr>
    <td>class</td>
    <td>string</td>
    <td>true</td>
    <td>The class name of a document class that will be used to generate the resource.</td>
</tr>
<tr>
    <td>options</td>
    <td>array</td>
    <td>false</td>
    <td>An array of options that will be passed to the generator.</td>
</tr>
</tbody>
</table>

    <p>A complete config might look like:</p>
<pre class="prettyprint linenums">
$manifest = new Zoop\Shard\Manifest([
    ...
    'extension_configs' => [
        'extension.generator' => [
            'userDescription.html' => [
                'generator' => 'my.description.generator',
                'class' => 'My\Documents\User',
                'options' => [
                    'theme' => 'ocean_blue'
                ]
            ]
        ]
    ],
    ...
]);
</pre>

    <h2>The Resource Map</h2>

    <p>The resource map is a service provided by the generator extension. To get it use:</p>

<pre class="prettyprint linenums">
$resourceMap = $manifest->getServiceManager()->get('resourceMap');
</pre>

    <p>To check if a resource can be generated:</p>

<pre class="prettyprint linenums">
if ($resourceMap->has('userDescription.html')){
    //resource can be generated
} else {
    //resource can't be generated
};
</pre>

    <p>To generate a resource:</p>
<pre class="prettyprint linenums">
$html = $resourceMap->get('userDescription.html');
</pre>

    <h2>Create your own generator</h2>

    <p>To create your own generator, just implement <code>Zoop\Shard\Generator\GeneratorInterface</code>. Eg:</p>

<pre class="prettyprint linenums">
namespace My;

use Zoop\Shard\Generator\GeneratorInterface;

class DescriptionGenerator implements GeneratorInterface
{
    public function generate($name, $class, $options = null)
    {
        return "<p>You requested resource $name for $class be generated</p>";
    }
}
</pre>

    <p>You will also need to register your generator with the service manager. This is most easily done when configuring the Manifest. Eg:</p>
<pre class="prettyprint linenums">
$manifest = new Zoop\Shard\Manifest([
    ...
    'extension_configs' => [
        'extension.generator' => [
            ...
        ]
    ],
    'service_manager_config' => [
        'invokables' => [
            'my.description.generator' => 'My\DescriptionGenerator'
        ],
        ...
    ]
]);
</pre>

</section>
